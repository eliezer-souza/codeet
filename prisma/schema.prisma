// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String
  email         String        @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Group         Group[]       @relation("administrator")
  Member        Member[]
  Participant   Participant[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Group {
  id              String   @id
  name            String   @unique
  description     String
  details         String
  urlLogo         String?
  administratorId String
  administrator   User     @relation("administrator", fields: [administratorId], references: [id])
  Member          Member[]
  Event           Event[]
}

model Member {
  groupId String
  group   Group  @relation(fields: [groupId], references: [id])
  userId  String
  user    User   @relation(fields: [userId], references: [id])

  @@id([groupId, userId])
}

model Event {
  id          String        @id
  name        String
  details     String
  date        DateTime
  canceled    Boolean       @default(false)
  finished    Boolean       @default(false)
  venue       Json
  groupId     String
  group       Group         @relation(fields: [groupId], references: [id])
  Participant Participant[]
}

model Participant {
  eventId String
  event   Event  @relation(fields: [eventId], references: [id])
  userId  String
  user    User   @relation(fields: [userId], references: [id])

  @@id([eventId, userId])
}
